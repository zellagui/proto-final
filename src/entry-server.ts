import type { H3Event } from 'h3'
import { extname } from 'pathe'
import { type SSRContext, renderToString } from 'vue/server-renderer'
import { renderSSRHead } from '@unhead/ssr'

import { createApp } from '/@src/app'

export async function render(event: H3Event, url: string, manifest: any) {
  const { app, router, head, initialState } = await createApp(true)

  // set the router to the desired URL before rendering
  await router.push(url)
  await router.isReady()

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: SSRContext = {
    event,
  }
  const appHtml = await renderToString(app, ctx)
  const { headTags, htmlAttrs, bodyAttrs, bodyTags, bodyTagsOpen } =
    await renderSSRHead(head)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  return {
    appHtml,
    headTags,
    htmlAttrs,
    bodyAttrs,
    bodyTags,
    bodyTagsOpen,
    preloadLinks,
    initialState,
  }
}

function renderPreloadLinks(modules: any, manifest: any) {
  let links = ''
  const seen = new Set()

  for (const id in modules) {
    if (!Object.hasOwn(modules, id)) continue

    const files = manifest[id]
    if (files) {
      for (const file of files) {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      }
    }
  }
  return links
}

function renderPreloadLink(file: string) {
  const ext = extname(file)

  switch (ext) {
    case '.js':
      return `<link rel="modulepreload" crossorigin href="${file}">`
    case '.css':
      return `<link rel="stylesheet" href="${file}">`
    case '.woff':
      return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
    case '.woff2':
      return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
    case '.gif':
      return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
    case '.jpg':
    case '.jpeg':
      return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
    case '.png':
      return ` <link rel="preload" href="${file}" as="image" type="image/png">`
    case '.svg':
      return ` <link rel="prefetch" href="${file}" as="image" type="image/svg+xml">`
    case '.webp':
      return ` <link rel="preload" href="${file}" as="image" type="image/webp">`
    case '.json':
      return ` <link rel="preload" href="${file}" as="fetch" type="application/json">`
    case '.mp4':
      return ` <link rel="preload" href="${file}" as="video" type="video/mp4">`
    case '.webm':
      return ` <link rel="preload" href="${file}" as="video" type="video/webm">`
    case '.ogg':
      return ` <link rel="preload" href="${file}" as="video" type="video/ogg">`
    case '.mp3':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/mpeg">`
    case '.wav':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/wav">`
    case '.m4a':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/mp4">`
    case '.aac':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/aac">`
    case '.oga':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/ogg">`
    case '.flac':
      return ` <link rel="preload" href="${file}" as="audio" type="audio/flac">`

    default:
      console.log('missing preload link for', file)
      return ''
  }
}
